/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp ESCAPE     &kp Q  &kp W  &kp F      &kp P  &kp B        &kp J    &kp L  &kp U      &kp Y    &kp SQT           &kp TAB
&kp BACKSPACE  &kp A  &kp R  &kp S      &kp T  &kp G        &kp M    &kp N  &kp E      &kp I    &kp O             &kp TILDE
&kp LSHFT      &kp Z  &kp X  &kp C      &kp D  &kp V        &kp K    &kp H  &kp COMMA  &kp DOT  &kp LEFT_BRACKET  &kp SEMICOLON
                             &kp LCTRL  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp LCTRL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    |BTCLR|     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&none      &kp EXCL         &kp AT           &kp HASH         &kp DOLLAR       &kp PRCNT          &kp CARET        &kp AMPS         &kp ASTERISK     &kp LPAR         &kp RPAR           &kp BSPC
&kp EQUAL  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5    &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0    &kp QUESTION
&kp LSHFT  &none            &none            &kp UNDER        &kp TILDE        &kp GRAVE          &kp PLUS         &kp MINUS        &kp ASTERISK     &kp SLASH        &kp RIGHT_BRACKET  &kp NON_US_BACKSLASH
                                             &none            &none            &none              &kp SPACE        &kp ENTER        &mo 3
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&kp TAB   &kp F1    &kp F2        &kp F3     &kp F4        &kp F5       &kp F6    &kp F7   &kp F8       &kp F9         &kp F10  &none
&kp CLCK  &kp LEFT  &kp UP_ARROW  &kp DOWN   &kp RIGHT     &none        &kp HOME  &kp END  &kp PAGE_UP  &kp PAGE_DOWN  &none    &kp LEFT_SHIFT
&kp DEL   &none     &kp K_PASTE   &kp K_CUT  &kp K_COPY    &kp F11      &kp F12   &none    &none        &none          &none    &none
                                  &none      &kp LEFT_WIN  &kp LCTRL    &none     &none    &none
            >;
        };

        control_layer {
            bindings = <
&tog 4             &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &kp C_MUTE  &kp C_VOL_UP  &kp C_VOLUME_DOWN  &none           &none  &bootloader
&out OUT_TOG       &none         &none         &none         &none         &none           &kp C_PLAY  &kp C_PAUSE   &kp C_NEXT         &kp C_PREVIOUS  &none  &sys_reset
&ext_power EP_TOG  &none         &none         &none         &none         &none           &none       &none         &none              &none           &none  &bt BT_CLR
                                               &none         &none         &none           &none       &none         &none
            >;
        };

        game_layer {
            bindings = <
&tog 4  &kp Q  &kp W  &kp E   &kp R   &kp T        &none  &none      &none      &none      &none   &trans
&trans  &kp A  &kp S  &kp D   &kp F   &kp G        &none  &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans
&trans  &kp Z  &kp X  &kp B   &kp V   &kp M        &none  &none      &trans     &trans     &trans  &trans
                      &trans  &trans  &kp SPACE    &mo 1  &trans     &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
